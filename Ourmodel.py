# -*- coding: utf-8 -*-
"""모델.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u_cdGH5i0g9YGAsUfCpXvLBMQ2uJEkW7
"""

from tensorflow.keras.datasets import cifar10
from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Input, Dropout, BatchNormalization
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.optimizers import Adam, SGD
from tensorflow.keras.utils import to_categorical

from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
plt.style.use('seaborn-white')

import numpy as np

(x_train_full, y_train_full), (x_test, y_test) = cifar10.load_data()

print(x_train_full.shape, y_train_full.shape)
print(x_test.shape, y_test.shape)

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog',
               'horse', 'sheep', 'truck']

x_mean = np.mean(x_train_full, axis=(0,1,2))
x_std = np.std(x_train_full, axis=(0,1,2))
x_train_full = (x_train_full - x_mean) / x_std
x_test = (x_test-x_mean) / x_std

x_train, x_val, y_train, y_val = train_test_split(x_train_full, y_train_full, test_size=0.2)

print(x_train.shape)
print(y_train.shape)
print(x_val.shape)
print(y_val.shape)
print(x_test.shape)
print(y_test.shape)

def model_build():
  model = Sequential()

  input = Input(shape=(128,128,3))
  output = Conv2D(filters=64, kernel_size=5, padding='same', activation='relu')(input)
  output = Conv2D(filters=128, kernel_size=5, padding='same', activation='relu')(output)
  output = MaxPool2D(pool_size=(2,2), strides=2, padding='same')(output)
  output = MaxPool2D(pool_size=(2,2), strides=2, padding='same')(output)
  output = Conv2D(filters=256, kernel_size=3, padding='same', activation='relu')(output)
  output = MaxPool2D(pool_size=(2,2), strides=2, padding='same')(output)
  output = Conv2D(filters=512, kernel_size=3, padding='same', activati on='relu')(output)
  output = MaxPool2D(pool_size=(2,2), strides=2, padding='same')(output)
  output = Flatten()(output)
  output = Dense(1048, activation='relu')(output)
  output = Dense(256, activation='relu')(output)
  output = Dense(32, activation='relu')(output)
  output = Dense(2, activation='softmax')(output)

  model = Model(inputs=[input], outputs=output)

  model.compile(optimizer=Adam(learning_rate=1e-4),
                loss='sparse_categorical_crossentropy',
                metrics=['accuracy'])
  
  return model

model = model_build()
model.summary()